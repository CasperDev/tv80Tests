$date
	Sat Oct 25 21:21:19 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_fdcb49 $end
$var wire 1 ! cpu_clk $end
$var wire 1 " cpu_reset $end
$var wire 16 # io_a [15:0] $end
$var wire 1 $ cpu_wr_n $end
$var wire 1 % cpu_rfsh_n $end
$var wire 1 & cpu_rd_n $end
$var wire 1 ' cpu_mreq_n $end
$var wire 1 ( cpu_m1_n $end
$var wire 1 ) cpu_iorq_n $end
$var wire 1 * cpu_halt_n $end
$var wire 8 + cpu_do [7:0] $end
$var wire 8 , cpu_di [7:0] $end
$var wire 1 - cpu_busak_n $end
$var wire 16 . cpu_a [15:0] $end
$var reg 1 / FAIL $end
$var reg 1 0 i_clk $end
$var reg 1 1 i_reset_btn $end
$var reg 8 2 io_o [7:0] $end
$var reg 8 3 mem_o [7:0] $end
$scope module cpu $end
$var wire 1 4 busrq_n $end
$var wire 1 5 cen $end
$var wire 1 ! clk $end
$var wire 8 6 di [7:0] $end
$var wire 1 7 int_n $end
$var wire 1 8 nmi_n $end
$var wire 1 " reset $end
$var wire 1 9 wait_n $end
$var wire 1 : write $end
$var wire 7 ; tstate [6:0] $end
$var wire 1 % rfsh_n $end
$var wire 1 < no_read $end
$var wire 7 = mcycle [6:0] $end
$var wire 1 ( m1_n $end
$var wire 1 > iorq $end
$var wire 1 ? intcycle_n $end
$var wire 1 * halt_n $end
$var wire 8 @ dout [7:0] $end
$var wire 1 - busak_n $end
$var wire 16 A A [15:0] $end
$var parameter 32 B IOWait $end
$var parameter 32 C Mode $end
$var parameter 32 D T2Write $end
$var reg 8 E di_reg [7:0] $end
$var reg 1 ) iorq_n $end
$var reg 1 ' mreq_n $end
$var reg 1 & rd_n $end
$var reg 1 $ wr_n $end
$scope module core $end
$var wire 1 4 busrq_n $end
$var wire 1 5 cen $end
$var wire 1 ! clk $end
$var wire 8 F di [7:0] $end
$var wire 8 G dinst [7:0] $end
$var wire 1 7 int_n $end
$var wire 1 8 nmi_n $end
$var wire 1 " reset $end
$var wire 1 % rfsh_n $end
$var wire 1 9 wait_n $end
$var wire 1 : write $end
$var wire 3 H tstates [2:0] $end
$var wire 1 < no_read $end
$var wire 3 I mcycles_d [2:0] $end
$var wire 1 J iorq_i $end
$var wire 3 K Special_LD [2:0] $end
$var wire 4 L Set_BusB_To [3:0] $end
$var wire 4 M Set_BusA_To [3:0] $end
$var wire 3 N Set_Addr_To [2:0] $end
$var wire 1 O SetEI $end
$var wire 1 P SetDI $end
$var wire 1 Q Save_ALU $end
$var wire 1 R RstP $end
$var wire 16 S RegBusC [15:0] $end
$var wire 16 T RegBusB [15:0] $end
$var wire 16 U RegBusA [15:0] $end
$var wire 1 V Read_To_Reg $end
$var wire 1 W Read_To_Acc $end
$var wire 1 X PreserveC $end
$var wire 2 Y Prefix [1:0] $end
$var wire 1 Z LDZ $end
$var wire 1 [ LDW $end
$var wire 1 \ LDSPHL $end
$var wire 1 ] JumpXY $end
$var wire 1 ^ JumpE $end
$var wire 1 _ Jump $end
$var wire 1 ` Inc_WZ $end
$var wire 1 a Inc_PC $end
$var wire 4 b IncDec_16 [3:0] $end
$var wire 1 c I_SCF $end
$var wire 1 d I_RRD $end
$var wire 1 e I_RLD $end
$var wire 1 f I_RETN $end
$var wire 1 g I_INRC $end
$var wire 1 h I_DJNZ $end
$var wire 1 i I_CPL $end
$var wire 1 j I_CCF $end
$var wire 1 k I_BTR $end
$var wire 1 l I_BT $end
$var wire 1 m I_BC $end
$var wire 2 n IMode [1:0] $end
$var wire 1 o Halt $end
$var wire 8 p F_Out [7:0] $end
$var wire 1 q Extra_Reg_Save $end
$var wire 1 r ExchangeRp $end
$var wire 1 s ExchangeRS $end
$var wire 1 t ExchangeDH $end
$var wire 1 u ExchangeAF $end
$var wire 1 v Call $end
$var wire 1 w Arith16 $end
$var wire 8 x ALU_Q [7:0] $end
$var wire 4 y ALU_Op [3:0] $end
$var parameter 32 z Flag_C $end
$var parameter 32 { Flag_H $end
$var parameter 32 | Flag_N $end
$var parameter 32 } Flag_P $end
$var parameter 32 ~ Flag_S $end
$var parameter 32 !" Flag_X $end
$var parameter 32 "" Flag_Y $end
$var parameter 32 #" Flag_Z $end
$var parameter 32 $" IOWait $end
$var parameter 32 %" Mode $end
$var parameter 3 &" aBC $end
$var parameter 3 '" aDE $end
$var parameter 3 (" aIOA $end
$var parameter 3 )" aNone $end
$var parameter 3 *" aSP $end
$var parameter 3 +" aXY $end
$var parameter 3 ," aZI $end
$var reg 16 -" A [15:0] $end
$var reg 8 ." ACC [7:0] $end
$var reg 4 /" ALU_Op_r [3:0] $end
$var reg 1 0" Alternate $end
$var reg 8 1" Ap [7:0] $end
$var reg 1 2" Arith16_r $end
$var reg 1 3" Auto_Wait $end
$var reg 1 4" Auto_Wait_t1 $end
$var reg 1 5" Auto_Wait_t2 $end
$var reg 1 6" BTR_r $end
$var reg 8 7" BusA [7:0] $end
$var reg 1 8" BusAck $end
$var reg 8 9" BusB [7:0] $end
$var reg 1 :" BusReq_s $end
$var reg 1 ;" ClkEn $end
$var reg 8 <" DI_Reg [7:0] $end
$var reg 8 =" F [7:0] $end
$var reg 8 >" Fp [7:0] $end
$var reg 16 ?" HaltPC [15:0] $end
$var reg 1 @" Halt_FF $end
$var reg 8 A" I [7:0] $end
$var reg 16 B" ID16 [15:0] $end
$var reg 1 C" INT_s $end
$var reg 8 D" IR [7:0] $end
$var reg 2 E" ISet [1:0] $end
$var reg 2 F" IStatus [1:0] $end
$var reg 1 G" IncDecZ $end
$var reg 1 H" IntCycle $end
$var reg 1 I" IntE $end
$var reg 1 J" IntE_FF1 $end
$var reg 1 K" IntE_FF2 $end
$var reg 1 L" NMICycle $end
$var reg 1 M" NMI_s $end
$var reg 1 N" NextIs_XY_Fetch $end
$var reg 1 O" No_BTR $end
$var reg 1 P" Oldnmi_n $end
$var reg 16 Q" PC [15:0] $end
$var reg 16 R" PC16 [15:0] $end
$var reg 16 S" PC16_B [15:0] $end
$var reg 3 T" Pre_XY_F_M [2:0] $end
$var reg 1 U" PreserveC_r $end
$var reg 8 V" R [7:0] $end
$var reg 5 W" Read_To_Reg_r [4:0] $end
$var reg 3 X" RegAddrA [2:0] $end
$var reg 3 Y" RegAddrA_r [2:0] $end
$var reg 3 Z" RegAddrB [2:0] $end
$var reg 3 [" RegAddrB_r [2:0] $end
$var reg 3 \" RegAddrC [2:0] $end
$var reg 16 ]" RegBusA_r [15:0] $end
$var reg 8 ^" RegCopy [7:0] $end
$var reg 8 _" RegDIH [7:0] $end
$var reg 8 `" RegDIL [7:0] $end
$var reg 1 a" RegWEH $end
$var reg 1 b" RegWEL $end
$var reg 16 c" SP [15:0] $end
$var reg 16 d" SP16 [15:0] $end
$var reg 16 e" SP16_A [15:0] $end
$var reg 16 f" SP16_B [15:0] $end
$var reg 1 g" Save_ALU_r $end
$var reg 8 h" Save_Mux [7:0] $end
$var reg 1 i" SetEI_r $end
$var reg 1 j" T_Res $end
$var reg 16 k" TmpAddr [15:0] $end
$var reg 1 l" XY_Ind $end
$var reg 2 m" XY_State [1:0] $end
$var reg 1 n" Z16_r $end
$var reg 1 - busak_n $end
$var reg 8 o" dout [7:0] $end
$var reg 1 * halt_n $end
$var reg 1 ? intcycle_n $end
$var reg 1 > iorq $end
$var reg 1 p" last_mcycle $end
$var reg 1 q" last_tstate $end
$var reg 1 ( m1_n $end
$var reg 7 r" mc [6:0] $end
$var reg 7 s" mcycle [6:0] $end
$var reg 3 t" mcycles [2:0] $end
$var reg 1 u" rfsh_n_r $end
$var reg 1 v" stop $end
$var reg 7 w" ts [6:0] $end
$var reg 7 x" tstate [6:0] $end
$scope function mcyc_to_number $end
$var reg 7 y" mcyc [6:0] $end
$upscope $end
$scope function number_to_bitvec $end
$var reg 3 z" num [2:0] $end
$upscope $end
$scope module i_alu $end
$var wire 4 {" ALU_Op [3:0] $end
$var wire 1 2" Arith16 $end
$var wire 8 |" BusA [7:0] $end
$var wire 8 }" BusB [7:0] $end
$var wire 8 ~" F_In [7:0] $end
$var wire 6 !# IR [5:0] $end
$var wire 2 "# ISet [1:0] $end
$var wire 1 n" Z16 $end
$var parameter 32 ## Flag_C $end
$var parameter 32 $# Flag_H $end
$var parameter 32 %# Flag_N $end
$var parameter 32 &# Flag_P $end
$var parameter 32 '# Flag_S $end
$var parameter 32 (# Flag_X $end
$var parameter 32 )# Flag_Y $end
$var parameter 32 *# Flag_Z $end
$var parameter 32 +# Mode $end
$var reg 8 ,# BitMask [7:0] $end
$var reg 1 -# Carry7_v $end
$var reg 1 .# Carry_v $end
$var reg 9 /# DAA_Q [8:0] $end
$var reg 8 0# F_Out [7:0] $end
$var reg 1 1# HalfCarry_v $end
$var reg 1 2# OverFlow_v $end
$var reg 8 3# Q [7:0] $end
$var reg 8 4# Q_t [7:0] $end
$var reg 8 5# Q_v [7:0] $end
$var reg 1 6# UseCarry $end
$scope function AddSub1 $end
$var reg 1 7# A $end
$var reg 1 8# B $end
$var reg 1 9# Carry_In $end
$var reg 1 :# Sub $end
$upscope $end
$scope function AddSub3 $end
$var reg 3 ;# A [2:0] $end
$var reg 3 <# B [2:0] $end
$var reg 1 =# Carry_In $end
$var reg 1 ># Sub $end
$upscope $end
$scope function AddSub4 $end
$var reg 4 ?# A [3:0] $end
$var reg 4 @# B [3:0] $end
$var reg 1 A# Carry_In $end
$var reg 1 B# Sub $end
$upscope $end
$upscope $end
$scope module mcode $end
$var wire 8 C# F [7:0] $end
$var wire 1 H" INTCycle $end
$var wire 8 D# IR [7:0] $end
$var wire 2 E# ISet [1:0] $end
$var wire 7 F# MCycle [6:0] $end
$var wire 1 L" NMICycle $end
$var wire 1 l" XY_Ind $end
$var wire 3 G# w_cc [2:0] $end
$var wire 1 H# f_cc_true $end
$var wire 3 I# SSS [2:0] $end
$var wire 2 J# DPAIR [1:0] $end
$var wire 3 K# DDD [2:0] $end
$var parameter 32 L# Flag_C $end
$var parameter 32 M# Flag_H $end
$var parameter 32 N# Flag_N $end
$var parameter 32 O# Flag_P $end
$var parameter 32 P# Flag_S $end
$var parameter 32 Q# Flag_X $end
$var parameter 32 R# Flag_Y $end
$var parameter 32 S# Flag_Z $end
$var parameter 32 T# Mode $end
$var parameter 3 U# aBC $end
$var parameter 3 V# aDE $end
$var parameter 3 W# aIOA $end
$var parameter 3 X# aNone $end
$var parameter 3 Y# aSP $end
$var parameter 3 Z# aXY $end
$var parameter 3 [# aZI $end
$var reg 4 \# ALU_Op [3:0] $end
$var reg 1 w Arith16 $end
$var reg 1 v Call $end
$var reg 1 u ExchangeAF $end
$var reg 1 t ExchangeDH $end
$var reg 1 s ExchangeRS $end
$var reg 1 r ExchangeRp $end
$var reg 1 q Extra_Reg_Save $end
$var reg 1 o Halt $end
$var reg 2 ]# IMode [1:0] $end
$var reg 1 J IORQ $end
$var reg 1 m I_BC $end
$var reg 1 l I_BT $end
$var reg 1 k I_BTR $end
$var reg 1 j I_CCF $end
$var reg 1 i I_CPL $end
$var reg 1 h I_DJNZ $end
$var reg 1 g I_INRC $end
$var reg 1 f I_RETN $end
$var reg 1 e I_RLD $end
$var reg 1 d I_RRD $end
$var reg 1 c I_SCF $end
$var reg 4 ^# IncDec_16 [3:0] $end
$var reg 1 a Inc_PC $end
$var reg 1 ` Inc_WZ $end
$var reg 1 _ Jump $end
$var reg 1 ^ JumpE $end
$var reg 1 ] JumpXY $end
$var reg 1 \ LDSPHL $end
$var reg 1 [ LDW $end
$var reg 1 Z LDZ $end
$var reg 3 _# MCycles [2:0] $end
$var reg 1 < NoRead $end
$var reg 2 `# Prefix [1:0] $end
$var reg 1 X PreserveC $end
$var reg 1 W Read_To_Acc $end
$var reg 1 V Read_To_Reg $end
$var reg 1 R RstP $end
$var reg 1 Q Save_ALU $end
$var reg 1 P SetDI $end
$var reg 1 O SetEI $end
$var reg 3 a# Set_Addr_To [2:0] $end
$var reg 4 b# Set_BusA_To [3:0] $end
$var reg 4 c# Set_BusB_To [3:0] $end
$var reg 3 d# Special_LD [2:0] $end
$var reg 3 e# TStates [2:0] $end
$var reg 1 : Write $end
$scope begin default_ed_block $end
$upscope $end
$scope begin handle_prefixes $end
$upscope $end
$upscope $end
$scope module regs $end
$var wire 3 f# AddrA [2:0] $end
$var wire 3 g# AddrB [2:0] $end
$var wire 3 h# AddrC [2:0] $end
$var wire 8 i# B [7:0] $end
$var wire 8 j# C [7:0] $end
$var wire 1 ;" CEN $end
$var wire 8 k# D [7:0] $end
$var wire 8 l# DIH [7:0] $end
$var wire 8 m# DIL [7:0] $end
$var wire 8 n# DOAH [7:0] $end
$var wire 8 o# DOAL [7:0] $end
$var wire 8 p# DOBH [7:0] $end
$var wire 8 q# DOBL [7:0] $end
$var wire 8 r# DOCH [7:0] $end
$var wire 8 s# DOCL [7:0] $end
$var wire 8 t# E [7:0] $end
$var wire 8 u# H [7:0] $end
$var wire 8 v# L [7:0] $end
$var wire 1 a" WEH $end
$var wire 1 b" WEL $end
$var wire 1 ! clk $end
$var wire 16 w# IY [15:0] $end
$var wire 16 x# IX [15:0] $end
$var wire 16 y# HLp [15:0] $end
$var wire 16 z# HL [15:0] $end
$var wire 16 {# DEp [15:0] $end
$var wire 16 |# DE [15:0] $end
$var wire 16 }# BCp [15:0] $end
$var wire 16 ~# BC [15:0] $end
$upscope $end
$scope begin sync_inputs $end
$upscope $end
$upscope $end
$upscope $end
$scope task ASSERT $end
$var reg 1 !$ HaltFF $end
$var reg 8 "$ I [7:0] $end
$var reg 2 #$ IFF [1:0] $end
$var reg 2 $$ IM [1:0] $end
$var reg 8 %$ R [7:0] $end
$var reg 192 &$ REGS [191:0] $end
$var reg 1 '$ alt $end
$upscope $end
$scope task ASSERTMEM $end
$var reg 16 ($ addr [15:0] $end
$var reg 8 )$ expected [7:0] $end
$upscope $end
$scope task RESULT $end
$upscope $end
$scope task SETFAIL $end
$upscope $end
$scope task SETMEM $end
$var reg 16 *$ addr [15:0] $end
$var reg 8 +$ value [7:0] $end
$upscope $end
$scope task SETUP $end
$var reg 1 ,$ HaltFF $end
$var reg 8 -$ I [7:0] $end
$var reg 2 .$ IFF [1:0] $end
$var reg 2 /$ IM [1:0] $end
$var reg 8 0$ R [7:0] $end
$var reg 192 1$ REGS [191:0] $end
$var reg 1 2$ alt $end
$upscope $end
$scope task TESTCASE $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b110 [#
b10 Z#
b101 Y#
b111 X#
b100 W#
b1 V#
b0 U#
b0 T#
b110 S#
b101 R#
b11 Q#
b111 P#
b10 O#
b1 N#
b100 M#
b0 L#
b0 +#
b110 *#
b101 )#
b11 (#
b111 '#
b10 &#
b1 %#
b100 $#
b0 ##
b110 ,"
b10 +"
b101 *"
b111 )"
b100 ("
b1 '"
b0 &"
b0 %"
b1 $"
b110 #"
b101 ""
b11 !"
b111 ~
b10 }
b1 |
b100 {
b0 z
b1 D
b0 C
b1 B
$end
#0
$dumpvars
x2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
x,$
bx +$
bx *$
bx )$
bx ($
x'$
bx &$
bx %$
bx $$
bx #$
bx "$
x!$
bx ~#
bx }#
bx |#
bx {#
bx z#
bx y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
bx p#
bx o#
bx n#
bx m#
bx l#
bx k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
bx ]#
bx \#
bx K#
bx J#
bx I#
xH#
bx G#
bx F#
bx E#
bx D#
bx C#
xB#
xA#
bx @#
bx ?#
x>#
x=#
bx <#
bx ;#
x:#
x9#
x8#
x7#
x6#
bx 5#
bx 4#
bx 3#
x2#
x1#
bx 0#
bx /#
x.#
x-#
bx ,#
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
xv"
1u"
bx t"
bx s"
bx r"
xq"
xp"
bx o"
xn"
bx m"
xl"
bx k"
0j"
xi"
bx h"
xg"
bx f"
bx e"
bx d"
bx c"
0b"
0a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
xU"
bx T"
bx S"
bx R"
bx Q"
xP"
xO"
0N"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
bx F"
bx E"
bx D"
xC"
bx B"
bx A"
x@"
bx ?"
bx >"
bx ="
bx <"
x;"
x:"
bx 9"
x8"
bx 7"
x6"
x5"
x4"
x3"
x2"
bx 1"
x0"
bx /"
bx ."
bx -"
bx y
bx x
xw
xv
xu
xt
xs
xr
xq
bx p
xo
bx n
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
bx b
xa
x`
x_
x^
x]
x\
x[
xZ
bx Y
xX
xW
xV
bx U
bx T
bx S
xR
xQ
xP
xO
bx N
bx M
bx L
bx K
xJ
bx I
bx H
bx G
bx F
bx E
bx A
bx @
x?
x>
bx =
x<
bx ;
x:
19
18
17
bx 6
15
14
bx 3
bx 2
11
00
0/
bx .
x-
bx ,
bx +
x*
1)
x(
1'
1&
1%
1$
b10000xxxxxxxx #
1"
0!
$end
#5
0v"
0>
0q"
0:
0<
0o
b11 n
b11 ]#
0O
0P
0g
0d
0e
0k
0m
0l
0f
0c
0j
0i
0h
0s
0u
0r
0t
b0 K
b0 d#
0\
0[
0Z
0R
0v
0]
0^
0_
b111 N
b111 a#
0J
0w
0X
0Q
b0 y
b0 \#
b0 M
b0 b#
b0 L
b0 c#
0q
0V
0W
b0 b
b0 ^#
0`
0a
b100 H
b100 e#
b1 I
b1 _#
0H#
b0 `"
b0 m#
b0 _"
b0 l#
0:#
0>#
0B#
0A#
06#
b1 ,#
bx0xxxx0x p
bx0xxxx0x 0#
b0 !#
b0 Y
b0 `#
b0 G#
b0 K#
b0 I#
b0 J#
b1000000000000 #
b0 d"
b1 R"
b1 f"
b1111111111111111 e"
b1 S"
b0 h"
1;"
03"
0I"
1?
1-
1*
b0 <"
b1 ;
b1 w"
b1 =
b1 r"
0P"
0M"
0C"
0:"
0l"
0U"
0g"
b0 /"
b0 {"
0n"
06"
02"
b0 W"
00"
b1111111111111111 c"
b0 V"
b0 A"
b11111111 >"
b11111111 1"
b11111111 ="
b11111111 ~"
b11111111 C#
b11111111 ."
b0 +
b0 @
b0 o"
b0 t"
b0 F"
b0 m"
b0 E"
b0 "#
b0 E#
b0 D"
b0 D#
b0 k"
b0 .
b0 A
b0 -"
b0 ?"
b0 Q"
0i"
1(
05"
04"
0O"
0K"
0J"
0H"
0L"
08"
0@"
b0 T"
b1 x"
b1 s"
b1 F#
b0 E
b0 F
1!
10
#10
0!
00
#15
b0 Z"
b0 g#
b0 X"
b0 f#
b11 \"
b11 h#
b0 ["
b0 Y"
1!
10
#20
0!
00
#25
1!
10
#30
0!
00
0"
01
#35
b1110100 x
b1110100 3#
b1110100 4#
02#
0.#
07#
08#
09#
0-#
b11 ;#
b11 <#
1=#
11#
b1110100 5#
b1010 ?#
b1010 @#
b10 ;
b10 w"
1p"
b111010 7"
b111010 |"
b111010 9"
b111010 }"
b11101000111001 ]"
1P"
0(
b10 x"
b1 t"
1H#
b1 d"
b11101000111010 B"
b0 e"
b110000 p
b110000 0#
1!
10
b10101001 +$
b11111001101111 *$
b0 c"
b11111000100001 w#
b10110111 s#
b111010110111 S
b1110 r#
b111010110111 x#
b0 y#
b0 {#
b0 }#
b10110110 v#
b1110100 u#
b111010010110110 z#
b110100 t#
b10111000 k#
b1011100000110100 |#
b111001 o#
b111001 q#
b111001 j#
b11101000111001 U
b111010 n#
b11101000111001 T
b111010 p#
b111010 i#
b11101000111001 ~#
b0 >"
b0 1"
b11110 ="
b11110 ~"
b11110 C#
b1101001 ."
02$
0,$
b0 /$
b0 .$
b0 0$
b0 -$
b11010010001111000111010001110011011100000110100011101001011011000000000000000000000000000000000000000000000000000000000000000000000111010110111001111100010000100000000000000000000000000000000 1$
#40
b11111101 ,
b11111101 6
b11111101 G
b11111101 3
0!
00
#45
b100 ;
b100 w"
b111010 +
b111010 @
b111010 o"
b100 x"
0'
0&
1!
10
#50
0!
00
#55
b111 y
b111 \#
b11111101 `"
b11111101 m#
b11111101 _"
b11111101 l#
b11111101 h"
b110000 p
b110000 0#
b1110100 4#
b10000000 ,#
0H#
b11111101 <"
b1000 ;
b1000 w"
b111101 !#
b11 Y
b11 `#
b111 G#
b111 K#
b101 I#
b11 J#
b111010110100 d"
b10 R"
b1111111111111101 f"
b111010110111 e"
b11111101 E
b11111101 F
1'
1&
b1000 x"
1(
0%
0u"
b11111101 D"
b11111101 D#
b1 Q"
b1 V"
1!
10
#60
0!
00
#65
1j"
b1 d"
b1 f"
b0 e"
b10000 ;
b10000 w"
1q"
b10000 x"
0'
1!
10
#70
0!
00
#75
0j"
b10 ;
b10 w"
0q"
b0 x
b0 3#
b1101010 p
b1101010 0#
b0 4#
1.#
1:#
19#
1-#
1>#
b0 5#
1B#
1A#
b1000000000001 #
1'
0(
b10 x"
1%
1u"
b111 /"
b111 {"
b1 .
b1 A
b1 -"
1!
10
#80
b11001011 ,
b11001011 6
b11001011 G
b11001011 3
0!
00
#85
b1110100 x
b1110100 3#
b110000 p
b110000 0#
b1110100 4#
0.#
0:#
09#
0-#
0>#
b1110100 5#
0B#
0A#
b100 ;
b100 w"
b0 /"
b0 {"
b100 x"
0'
0&
1!
10
#90
0!
00
#95
b1 y
b1 \#
b11001011 `"
b11001011 m#
b11001011 _"
b11001011 l#
b11001011 h"
b110000 p
b110000 0#
b1110100 4#
b10 ,#
b11001011 <"
b1000 ;
b1000 w"
b1011 !#
b1 Y
b1 `#
b1 G#
b1 K#
b11 I#
b0 J#
1N"
b111010000010 d"
b11 R"
b1111111111001011 f"
b111010110111 e"
b11001011 E
b11001011 F
1'
1&
b1000 x"
1(
0%
0u"
b10 m"
b11001011 D"
b11001011 D#
b10 Q"
b1 ?"
b10 V"
1!
10
#100
0!
00
#105
1j"
b1 d"
b1 f"
b0 e"
b10000 ;
b10000 w"
1q"
b10000 x"
0'
1!
10
#110
0!
00
#115
1a
b11 H
b11 e#
0p"
0N"
0j"
b10 ;
b10 w"
b100000 =
b100000 r"
0q"
b110000 p
b110000 0#
b1110100 4#
16#
b1000000000010 #
1'
b1 T"
b100000 s"
b100000 F#
b10 x"
1%
1u"
b1 /"
b1 {"
b10 .
b10 A
b10 -"
b1 y"
1!
10
#120
b1001110 ,
b1001110 6
b1001110 G
b1001110 3
0!
00
#125
b11 L
b11 c#
b11 M
b11 b#
1a
b0 Y
b0 `#
b110000 p
b110000 0#
b1110100 4#
06#
b100 ;
b100 w"
b111110 r#
b11111000100001 S
b100001 s#
b111 \"
b111 h#
b1 E"
b1 "#
b1 E#
1l"
b0 /"
b0 {"
b100 x"
0'
0&
1!
10
#130
0!
00
#135
b1001110 `"
b1001110 m#
b1001110 _"
b1001110 l#
b1011100000110101 B"
b1110010 x
b1110010 3#
b110000 p
b110000 0#
b1110010 4#
b1110010 5#
b1001 ?#
b1001 @#
b1001110 h"
1j"
b1001110 <"
b1000 ;
b1000 w"
b10111000 p#
b1011100000110100 T
b110100 q#
b1 Z"
b1 g#
b10111000 n#
b1011100000110100 U
b110100 o#
b1 X"
b1 f#
1q"
b11111001101111 d"
b100 R"
b1001110 f"
b11111000100001 e"
b111001 7"
b111001 |"
b111001 9"
b111001 }"
b111110 r#
b11111000100001 S
b100001 s#
b111 \"
b111 h#
b1 ["
b1 Y"
b1001110 E
b1001110 F
1'
1&
b1000 x"
b11 Q"
1!
10
#140
0!
00
#145
b101 H
b101 e#
b11 M
b11 b#
b11 L
b11 c#
1a
b1101000 x
b1101000 3#
b101000 p
b101000 0#
b1101000 4#
0=#
01#
b1101000 5#
b100 ?#
b100 @#
16#
b1000000000011 #
0j"
b1 d"
b1 f"
b0 e"
b10 ;
b10 w"
b1000000 =
b1000000 r"
0q"
b1011100000110100 ]"
b111110 r#
b11111000100001 S
b100001 s#
b111 \"
b111 h#
b110100 7"
b110100 |"
b110100 9"
b110100 }"
b11 W"
b11111001101111 k"
b1 /"
b1 {"
b11 .
b11 A
b11 -"
b1000000 s"
b1000000 F#
b10 x"
1!
10
#150
b1001001 ,
b1001001 6
b1001001 G
b1001001 3
0!
00
#155
b11101000111010 B"
b100 ;
b100 w"
b111010 n#
b11101000111001 U
b111001 o#
b0 X"
b0 f#
b101000 p
b101000 0#
b1101000 4#
06#
b1110 r#
b111010110111 S
b10110111 s#
b11 \"
b11 h#
0'
0&
b100 x"
b110100 +
b110100 @
b110100 o"
b0 W"
b0 /"
b0 {"
1!
10
#160
0!
00
#165
b1 M
b1 b#
b1 L
b1 c#
1a
b101 H
b101 e#
b1001001 `"
b1001001 m#
b1001001 _"
b1001001 l#
b1101101 x
b1101101 3#
b101000 p
b101000 0#
b1101101 4#
b1101101 5#
b1001 ?#
b1001 !#
b1 I#
b1001001 h"
b111100000000 d"
b101 R"
b1011100000110101 B"
b1001001 f"
b111010110111 e"
b10111000 n#
b1011100000110100 U
b110100 o#
b1 X"
b1 f#
b1001001 <"
b1000 ;
b1000 w"
b11101000111001 ]"
b111001 7"
b111001 |"
b100 Q"
b1001001 D"
b1001001 D#
b1000 x"
b1001001 E
b1001001 F
1'
1&
1!
10
#170
0!
00
#175
b1101000 x
b1101000 3#
b101000 p
b101000 0#
b1101000 4#
b1101000 5#
b100 ?#
b1 d"
b11101000111010 B"
b1 f"
b0 e"
b10000 ;
b10000 w"
b111010 p#
b11101000111001 T
b111001 q#
b0 Z"
b0 g#
b111010 n#
b11101000111001 U
b111001 o#
b0 X"
b0 f#
b110100 7"
b110100 |"
b1011100000110100 ]"
b0 ["
b0 Y"
b10000 x"
1!
10
#180
0!
00
#185
b1110010 x
b1110010 3#
b110000 p
b110000 0#
b1110010 4#
1=#
11#
b1110010 5#
b1001 ?#
b1001 @#
1j"
b100000 ;
b100000 w"
1q"
b11101000111001 ]"
b111001 7"
b111001 |"
b111001 9"
b111001 }"
b100000 x"
1!
10
#190
0!
00
#195
b1 M
b1 b#
b1 L
b1 c#
0a
b11 H
b11 e#
0j"
b10 ;
b10 w"
b10 =
b10 r"
0q"
b110000 p
b110000 0#
b1110010 4#
16#
b1000000000100 #
b10 s"
b10 F#
b10 x"
b1 W"
b1 /"
b1 {"
b100 .
b100 A
b100 -"
b10 z"
1!
10
#200
bx ,
bx 6
bx G
bx 3
0!
00
#205
b110000 p
b110000 0#
b1110010 4#
06#
b100 ;
b100 w"
b111001 +
b111001 @
b111001 o"
b0 W"
b0 /"
b0 {"
b100 x"
0'
0&
1!
10
#210
0!
00
#215
bx `"
bx m#
bx _"
bx l#
bx h"
1j"
bx d"
bx f"
b111010110111 e"
bx <"
b1000 ;
b1000 w"
1q"
bx E
bx F
1'
1&
b1000 x"
1!
10
#220
0!
00
#225
b1 M
b1 b#
b1 L
b1 c#
b110000 p
b110000 0#
b1110010 4#
16#
0j"
b1 d"
b1 f"
b0 e"
b10 ;
b10 w"
b100 =
b100 r"
0q"
b1 W"
b1 /"
b1 {"
b100 s"
b100 F#
b10 x"
1!
10
#230
0!
00
#235
b100 ;
b100 w"
b110000 p
b110000 0#
b1110010 4#
06#
0'
0&
b100 x"
b0 W"
b0 /"
b0 {"
1!
10
#240
0!
00
#245
1j"
bx d"
bx f"
b111010110111 e"
b1000 ;
b1000 w"
1q"
b1000 x"
1'
1&
1!
10
#250
0!
00
#255
b1 M
b1 b#
b1 L
b1 c#
0j"
b1 d"
b1 f"
b0 e"
b10 ;
b10 w"
b1000 =
b1000 r"
0q"
b110000 p
b110000 0#
b1110010 4#
16#
b1000 s"
b1000 F#
b10 x"
b1 W"
b1 /"
b1 {"
1!
10
1/
0'$
0!$
b0 $$
b0 #$
b10 %$
b0 "$
b11010010111110000111010001110011011100000110100011101001011011000000000000000000000000000000000000000000000000000000000000000000000111010110111001111100010000100000000000000000000000000000100 &$
