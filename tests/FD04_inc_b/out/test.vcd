$date
	Sun Oct 19 09:39:14 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module test $end
$var parameter 192 ! TESTNAME $end
$scope module tb $end
$var wire 1 " cpu_clk $end
$var wire 1 # cpu_reset $end
$var wire 8 $ irq_data [7:0] $end
$var wire 1 % cpu_wr_n $end
$var wire 1 & cpu_rfsh_n $end
$var wire 1 ' cpu_rd_n $end
$var wire 1 ( cpu_mreq_n $end
$var wire 1 ) cpu_m1_n $end
$var wire 1 * cpu_iorq_n $end
$var wire 1 + cpu_halt_n $end
$var wire 8 , cpu_do [7:0] $end
$var wire 8 - cpu_di [7:0] $end
$var wire 1 . cpu_busak_n $end
$var wire 16 / cpu_a [15:0] $end
$var reg 1 0 FAIL $end
$var reg 385 1 TESTCASE [0:384] $end
$var reg 1 2 cpu_int_n $end
$var reg 1 3 cpu_nmi_n $end
$var reg 1 4 i_clk $end
$var reg 1 5 i_reset_btn $end
$var reg 8 6 io_o [7:0] $end
$var reg 8 7 mem_o [7:0] $end
$scope module cpu $end
$var wire 1 8 busrq_n $end
$var wire 1 9 cen $end
$var wire 1 " clk $end
$var wire 8 : di [7:0] $end
$var wire 1 2 int_n $end
$var wire 1 3 nmi_n $end
$var wire 1 # reset $end
$var wire 1 ; wait_n $end
$var wire 1 < write $end
$var wire 7 = tstate [6:0] $end
$var wire 1 & rfsh_n $end
$var wire 1 > no_read $end
$var wire 7 ? mcycle [6:0] $end
$var wire 1 ) m1_n $end
$var wire 1 @ iorq $end
$var wire 1 A intcycle_n $end
$var wire 1 + halt_n $end
$var wire 8 B dout [7:0] $end
$var wire 1 . busak_n $end
$var wire 16 C A [15:0] $end
$var parameter 32 D IOWait $end
$var parameter 32 E Mode $end
$var parameter 32 F T2Write $end
$var reg 8 G di_reg [7:0] $end
$var reg 1 * iorq_n $end
$var reg 1 ( mreq_n $end
$var reg 1 ' rd_n $end
$var reg 1 % wr_n $end
$scope module core $end
$var wire 1 8 busrq_n $end
$var wire 1 9 cen $end
$var wire 1 " clk $end
$var wire 8 H di [7:0] $end
$var wire 8 I dinst [7:0] $end
$var wire 1 2 int_n $end
$var wire 1 3 nmi_n $end
$var wire 1 # reset $end
$var wire 1 & rfsh_n $end
$var wire 1 ; wait_n $end
$var wire 1 < write $end
$var wire 3 J tstates [2:0] $end
$var wire 1 > no_read $end
$var wire 3 K mcycles_d [2:0] $end
$var wire 1 L iorq_i $end
$var wire 3 M Special_LD [2:0] $end
$var wire 4 N Set_BusB_To [3:0] $end
$var wire 4 O Set_BusA_To [3:0] $end
$var wire 3 P Set_Addr_To [2:0] $end
$var wire 1 Q SetEI $end
$var wire 1 R SetDI $end
$var wire 1 S Save_ALU $end
$var wire 1 T RstP $end
$var wire 16 U RegBusC [15:0] $end
$var wire 16 V RegBusB [15:0] $end
$var wire 16 W RegBusA [15:0] $end
$var wire 1 X Read_To_Reg $end
$var wire 1 Y Read_To_Acc $end
$var wire 1 Z PreserveC $end
$var wire 2 [ Prefix [1:0] $end
$var wire 1 \ LDZ $end
$var wire 1 ] LDW $end
$var wire 1 ^ LDSPHL $end
$var wire 1 _ JumpXY $end
$var wire 1 ` JumpE $end
$var wire 1 a Jump $end
$var wire 1 b Inc_WZ $end
$var wire 1 c Inc_PC $end
$var wire 4 d IncDec_16 [3:0] $end
$var wire 1 e I_SCF $end
$var wire 1 f I_RRD $end
$var wire 1 g I_RLD $end
$var wire 1 h I_RETN $end
$var wire 1 i I_INRC $end
$var wire 1 j I_DJNZ $end
$var wire 1 k I_CPL $end
$var wire 1 l I_CCF $end
$var wire 1 m I_BTR $end
$var wire 1 n I_BT $end
$var wire 1 o I_BC $end
$var wire 2 p IMode [1:0] $end
$var wire 1 q Halt $end
$var wire 8 r F_Out [7:0] $end
$var wire 1 s Extra_Reg_Save $end
$var wire 1 t ExchangeRp $end
$var wire 1 u ExchangeRS $end
$var wire 1 v ExchangeDH $end
$var wire 1 w ExchangeAF $end
$var wire 1 x Call $end
$var wire 1 y Arith16 $end
$var wire 8 z ALU_Q [7:0] $end
$var wire 4 { ALU_Op [3:0] $end
$var parameter 32 | Flag_C $end
$var parameter 32 } Flag_H $end
$var parameter 32 ~ Flag_N $end
$var parameter 32 !" Flag_P $end
$var parameter 32 "" Flag_S $end
$var parameter 32 #" Flag_X $end
$var parameter 32 $" Flag_Y $end
$var parameter 32 %" Flag_Z $end
$var parameter 32 &" IOWait $end
$var parameter 32 '" Mode $end
$var parameter 3 (" aBC $end
$var parameter 3 )" aDE $end
$var parameter 3 *" aIOA $end
$var parameter 3 +" aNone $end
$var parameter 3 ," aSP $end
$var parameter 3 -" aXY $end
$var parameter 3 ." aZI $end
$var reg 16 /" A [15:0] $end
$var reg 8 0" ACC [7:0] $end
$var reg 4 1" ALU_Op_r [3:0] $end
$var reg 1 2" Alternate $end
$var reg 8 3" Ap [7:0] $end
$var reg 1 4" Arith16_r $end
$var reg 1 5" Auto_Wait $end
$var reg 1 6" Auto_Wait_t1 $end
$var reg 1 7" Auto_Wait_t2 $end
$var reg 1 8" BTR_r $end
$var reg 8 9" BusA [7:0] $end
$var reg 1 :" BusAck $end
$var reg 8 ;" BusB [7:0] $end
$var reg 1 <" BusReq_s $end
$var reg 1 =" ClkEn $end
$var reg 8 >" DI_Reg [7:0] $end
$var reg 8 ?" F [7:0] $end
$var reg 8 @" Fp [7:0] $end
$var reg 1 A" Halt_FF $end
$var reg 8 B" I [7:0] $end
$var reg 16 C" ID16 [15:0] $end
$var reg 1 D" INT_s $end
$var reg 8 E" IR [7:0] $end
$var reg 2 F" ISet [1:0] $end
$var reg 2 G" IStatus [1:0] $end
$var reg 1 H" IncDecZ $end
$var reg 1 I" IntCycle $end
$var reg 1 J" IntE $end
$var reg 1 K" IntE_FF1 $end
$var reg 1 L" IntE_FF2 $end
$var reg 1 M" NMICycle $end
$var reg 1 N" NMI_s $end
$var reg 1 O" NextIs_XY_Fetch $end
$var reg 1 P" No_BTR $end
$var reg 1 Q" Oldnmi_n $end
$var reg 16 R" PC [15:0] $end
$var reg 16 S" PC16 [15:0] $end
$var reg 16 T" PC16_B [15:0] $end
$var reg 3 U" Pre_XY_F_M [2:0] $end
$var reg 1 V" PreserveC_r $end
$var reg 8 W" R [7:0] $end
$var reg 5 X" Read_To_Reg_r [4:0] $end
$var reg 3 Y" RegAddrA [2:0] $end
$var reg 3 Z" RegAddrA_r [2:0] $end
$var reg 3 [" RegAddrB [2:0] $end
$var reg 3 \" RegAddrB_r [2:0] $end
$var reg 3 ]" RegAddrC [2:0] $end
$var reg 16 ^" RegBusA_r [15:0] $end
$var reg 8 _" RegDIH [7:0] $end
$var reg 8 `" RegDIL [7:0] $end
$var reg 1 a" RegWEH $end
$var reg 1 b" RegWEL $end
$var reg 16 c" SP [15:0] $end
$var reg 16 d" SP16 [15:0] $end
$var reg 16 e" SP16_A [15:0] $end
$var reg 16 f" SP16_B [15:0] $end
$var reg 1 g" Save_ALU_r $end
$var reg 8 h" Save_Mux [7:0] $end
$var reg 1 i" T_Res $end
$var reg 16 j" TmpAddr [15:0] $end
$var reg 1 k" XY_Ind $end
$var reg 2 l" XY_State [1:0] $end
$var reg 1 m" Z16_r $end
$var reg 1 . busak_n $end
$var reg 8 n" dout [7:0] $end
$var reg 1 + halt_n $end
$var reg 1 A intcycle_n $end
$var reg 1 @ iorq $end
$var reg 1 o" last_mcycle $end
$var reg 1 p" last_tstate $end
$var reg 1 ) m1_n $end
$var reg 7 q" mc [6:0] $end
$var reg 7 r" mcycle [6:0] $end
$var reg 3 s" mcycles [2:0] $end
$var reg 1 t" rfsh_n_r $end
$var reg 1 u" stop $end
$var reg 7 v" ts [6:0] $end
$var reg 7 w" tstate [6:0] $end
$scope function mcyc_to_number $end
$var reg 7 x" mcyc [6:0] $end
$upscope $end
$scope function number_to_bitvec $end
$var reg 3 y" num [2:0] $end
$upscope $end
$scope module i_alu $end
$var wire 4 z" ALU_Op [3:0] $end
$var wire 1 4" Arith16 $end
$var wire 8 {" BusA [7:0] $end
$var wire 8 |" BusB [7:0] $end
$var wire 8 }" F_In [7:0] $end
$var wire 6 ~" IR [5:0] $end
$var wire 2 !# ISet [1:0] $end
$var wire 1 m" Z16 $end
$var parameter 32 "# Flag_C $end
$var parameter 32 ## Flag_H $end
$var parameter 32 $# Flag_N $end
$var parameter 32 %# Flag_P $end
$var parameter 32 &# Flag_S $end
$var parameter 32 '# Flag_X $end
$var parameter 32 (# Flag_Y $end
$var parameter 32 )# Flag_Z $end
$var parameter 32 *# Mode $end
$var reg 8 +# BitMask [7:0] $end
$var reg 1 ,# Carry7_v $end
$var reg 1 -# Carry_v $end
$var reg 9 .# DAA_Q [8:0] $end
$var reg 8 /# F_Out [7:0] $end
$var reg 1 0# HalfCarry_v $end
$var reg 1 1# OverFlow_v $end
$var reg 8 2# Q [7:0] $end
$var reg 8 3# Q_t [7:0] $end
$var reg 8 4# Q_v [7:0] $end
$var reg 1 5# UseCarry $end
$scope function AddSub1 $end
$var reg 1 6# A $end
$var reg 1 7# B $end
$var reg 1 8# Carry_In $end
$var reg 1 9# Sub $end
$upscope $end
$scope function AddSub3 $end
$var reg 3 :# A [2:0] $end
$var reg 3 ;# B [2:0] $end
$var reg 1 <# Carry_In $end
$var reg 1 =# Sub $end
$upscope $end
$scope function AddSub4 $end
$var reg 4 ># A [3:0] $end
$var reg 4 ?# B [3:0] $end
$var reg 1 @# Carry_In $end
$var reg 1 A# Sub $end
$upscope $end
$upscope $end
$scope module mcode $end
$var wire 8 B# F [7:0] $end
$var wire 1 I" INTCycle $end
$var wire 8 C# IR [7:0] $end
$var wire 2 D# ISet [1:0] $end
$var wire 7 E# MCycle [6:0] $end
$var wire 1 M" NMICycle $end
$var wire 1 k" XY_Ind $end
$var wire 3 F# w_cc [2:0] $end
$var wire 1 G# f_cc_true $end
$var wire 3 H# SSS [2:0] $end
$var wire 2 I# DPAIR [1:0] $end
$var wire 3 J# DDD [2:0] $end
$var parameter 32 K# Flag_C $end
$var parameter 32 L# Flag_H $end
$var parameter 32 M# Flag_N $end
$var parameter 32 N# Flag_P $end
$var parameter 32 O# Flag_S $end
$var parameter 32 P# Flag_X $end
$var parameter 32 Q# Flag_Y $end
$var parameter 32 R# Flag_Z $end
$var parameter 32 S# Mode $end
$var parameter 3 T# aBC $end
$var parameter 3 U# aDE $end
$var parameter 3 V# aIOA $end
$var parameter 3 W# aNone $end
$var parameter 3 X# aSP $end
$var parameter 3 Y# aXY $end
$var parameter 3 Z# aZI $end
$var reg 4 [# ALU_Op [3:0] $end
$var reg 1 y Arith16 $end
$var reg 1 x Call $end
$var reg 1 w ExchangeAF $end
$var reg 1 v ExchangeDH $end
$var reg 1 u ExchangeRS $end
$var reg 1 t ExchangeRp $end
$var reg 1 s Extra_Reg_Save $end
$var reg 1 q Halt $end
$var reg 2 \# IMode [1:0] $end
$var reg 1 L IORQ $end
$var reg 1 o I_BC $end
$var reg 1 n I_BT $end
$var reg 1 m I_BTR $end
$var reg 1 l I_CCF $end
$var reg 1 k I_CPL $end
$var reg 1 j I_DJNZ $end
$var reg 1 i I_INRC $end
$var reg 1 h I_RETN $end
$var reg 1 g I_RLD $end
$var reg 1 f I_RRD $end
$var reg 1 e I_SCF $end
$var reg 4 ]# IncDec_16 [3:0] $end
$var reg 1 c Inc_PC $end
$var reg 1 b Inc_WZ $end
$var reg 1 a Jump $end
$var reg 1 ` JumpE $end
$var reg 1 _ JumpXY $end
$var reg 1 ^ LDSPHL $end
$var reg 1 ] LDW $end
$var reg 1 \ LDZ $end
$var reg 3 ^# MCycles [2:0] $end
$var reg 1 > NoRead $end
$var reg 2 _# Prefix [1:0] $end
$var reg 1 Z PreserveC $end
$var reg 1 Y Read_To_Acc $end
$var reg 1 X Read_To_Reg $end
$var reg 1 T RstP $end
$var reg 1 S Save_ALU $end
$var reg 1 R SetDI $end
$var reg 1 Q SetEI $end
$var reg 3 `# Set_Addr_To [2:0] $end
$var reg 4 a# Set_BusA_To [3:0] $end
$var reg 4 b# Set_BusB_To [3:0] $end
$var reg 3 c# Special_LD [2:0] $end
$var reg 3 d# TStates [2:0] $end
$var reg 1 < Write $end
$scope begin default_ed_block $end
$upscope $end
$scope begin handle_prefixes $end
$upscope $end
$upscope $end
$scope module regs $end
$var wire 3 e# AddrA [2:0] $end
$var wire 3 f# AddrB [2:0] $end
$var wire 3 g# AddrC [2:0] $end
$var wire 8 h# B [7:0] $end
$var wire 8 i# C [7:0] $end
$var wire 1 =" CEN $end
$var wire 8 j# D [7:0] $end
$var wire 8 k# DIH [7:0] $end
$var wire 8 l# DIL [7:0] $end
$var wire 8 m# DOAH [7:0] $end
$var wire 8 n# DOAL [7:0] $end
$var wire 8 o# DOBH [7:0] $end
$var wire 8 p# DOBL [7:0] $end
$var wire 8 q# DOCH [7:0] $end
$var wire 8 r# DOCL [7:0] $end
$var wire 8 s# E [7:0] $end
$var wire 8 t# H [7:0] $end
$var wire 8 u# L [7:0] $end
$var wire 1 a" WEH $end
$var wire 1 b" WEL $end
$var wire 1 " clk $end
$var wire 16 v# IY [15:0] $end
$var wire 16 w# IX [15:0] $end
$var wire 16 x# HLp [15:0] $end
$var wire 16 y# HL [15:0] $end
$var wire 16 z# DEp [15:0] $end
$var wire 16 {# DE [15:0] $end
$var wire 16 |# BCp [15:0] $end
$var wire 16 }# BC [15:0] $end
$upscope $end
$scope begin sync_inputs $end
$upscope $end
$upscope $end
$upscope $end
$scope task ASSERT $end
$var reg 8 ~# I [7:0] $end
$var reg 2 !$ IFF [1:0] $end
$var reg 8 "$ R [7:0] $end
$var reg 192 #$ REGS [191:0] $end
$var reg 1 $$ alt $end
$upscope $end
$scope task SETUP $end
$var reg 8 %$ I [7:0] $end
$var reg 2 &$ IFF [1:0] $end
$var reg 8 '$ R [7:0] $end
$var reg 192 ($ REGS [191:0] $end
$var reg 1 )$ alt $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b110 Z#
b10 Y#
b101 X#
b111 W#
b100 V#
b1 U#
b0 T#
b0 S#
b110 R#
b101 Q#
b11 P#
b111 O#
b10 N#
b1 M#
b100 L#
b0 K#
b0 *#
b110 )#
b101 (#
b11 '#
b111 &#
b10 %#
b1 $#
b100 ##
b0 "#
b110 ."
b10 -"
b101 ,"
b111 +"
b100 *"
b1 )"
b0 ("
b0 '"
b1 &"
b110 %"
b101 $"
b11 #"
b111 ""
b10 !"
b1 ~
b100 }
b0 |
b1 F
b0 E
b1 D
b1011010010110100100000010001100100010000100000001100000011010000100000001010000110100101101110011000110010000001100010001010010010000000101000011101010110111001100100011011110110001100101001 !
$end
#0
$dumpvars
x)$
bx ($
bx '$
bx &$
bx %$
x$$
bx #$
bx "$
bx !$
bx ~#
bx }#
bx |#
bx {#
bx z#
bx y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
bx p#
bx o#
bx n#
bx m#
bx l#
bx k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
bx ]#
bx \#
bx [#
bx J#
bx I#
bx H#
xG#
bx F#
bx E#
bx D#
bx C#
bx B#
xA#
x@#
bx ?#
bx >#
x=#
x<#
bx ;#
bx :#
x9#
x8#
x7#
x6#
x5#
bx 4#
bx 3#
bx 2#
x1#
x0#
bx /#
bx .#
x-#
x,#
bx +#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
xu"
1t"
bx s"
bx r"
bx q"
xp"
xo"
bx n"
xm"
bx l"
xk"
bx j"
0i"
bx h"
xg"
bx f"
bx e"
bx d"
bx c"
0b"
0a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
xV"
bx U"
bx T"
bx S"
bx R"
xQ"
xP"
0O"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
bx G"
bx F"
bx E"
xD"
bx C"
bx B"
xA"
bx @"
bx ?"
bx >"
x="
x<"
bx ;"
x:"
bx 9"
x8"
x7"
x6"
x5"
x4"
bx 3"
x2"
bx 1"
bx 0"
bx /"
bx {
bx z
xy
xx
xw
xv
xu
xt
xs
bx r
xq
bx p
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
bx d
xc
xb
xa
x`
x_
x^
x]
x\
bx [
xZ
xY
xX
bx W
bx V
bx U
xT
xS
xR
xQ
bx P
bx O
bx N
bx M
xL
bx K
bx J
bz I
bx H
bx G
bx C
bx B
xA
x@
bx ?
x>
bx =
x<
1;
bz :
19
18
bx 7
bx 6
15
04
13
12
bx 1
00
bx /
x.
bz -
bx ,
x+
1*
x)
1(
1'
1&
1%
b11100111 $
1#
0"
$end
#5
0u"
0@
0p"
0<
0>
0q
b11 p
b11 \#
0Q
0R
0i
0f
0g
0m
0o
0n
0h
0e
0l
0k
0j
0u
0w
0t
0v
b0 M
b0 c#
0^
0]
0\
0T
0x
0_
0`
0a
b111 P
b111 `#
0L
0y
0Z
0S
b0 {
b0 [#
b0 O
b0 a#
b0 N
b0 b#
0s
0X
0Y
b0 d
b0 ]#
0b
0c
b100 J
b100 d#
b1 K
b1 ^#
0G#
b0 `"
b0 l#
b0 _"
b0 k#
09#
0=#
0A#
0@#
05#
b1 +#
bx0xxxx0x r
bx0xxxx0x /#
b0 ~"
b0 [
b0 _#
b0 F#
b0 J#
b0 H#
b0 I#
b0 d"
b1 S"
b1 f"
b1111111111111111 e"
b1 T"
b0 h"
1="
05"
0J"
1A
1.
1+
b0 >"
b1 =
b1 v"
b1 ?
b1 q"
0Q"
0N"
0D"
0<"
0k"
0V"
0g"
b0 1"
b0 z"
0m"
08"
04"
b0 X"
02"
b1111111111111111 c"
b0 W"
b0 B"
b11111111 @"
b11111111 3"
b11111111 ?"
b11111111 }"
b11111111 B#
b11111111 0"
b0 ,
b0 B
b0 n"
b0 s"
b0 G"
b0 l"
b0 F"
b0 !#
b0 D#
b0 E"
b0 C#
b0 j"
b0 /
b0 C
b0 /"
b0 R"
1)
07"
06"
0P"
0L"
0K"
0I"
0M"
0:"
0A"
b0 U"
b1 w"
b1 r"
b1 E#
b0 G
b0 H
1"
14
#10
0"
04
#15
b0 ["
b0 f#
b0 Y"
b0 e#
b11 ]"
b11 g#
b0 \"
b0 Z"
1"
14
#20
0"
04
#25
1"
14
#30
0"
04
0#
05
#35
b11111110 z
b11111110 2#
b11111110 3#
01#
1-#
16#
17#
18#
1,#
b111 :#
b111 ;#
1<#
10#
b11111110 4#
b1111 >#
b1111 ?#
b10 =
b10 v"
1o"
b11111111 9"
b11111111 {"
b11111111 ;"
b11111111 |"
b1111111100000000 ^"
1Q"
0)
b10 w"
b1 s"
1G#
b1 d"
b1111111100000001 C"
b0 e"
b10111001 r
b10111001 /#
1"
14
b0 c"
b0 v#
b0 r#
b0 U
b0 q#
b0 w#
b0 x#
b0 z#
b0 |#
b0 u#
b0 t#
b0 y#
b0 s#
b0 j#
b0 {#
b0 n#
b0 p#
b0 i#
b1111111100000000 W
b11111111 m#
b1111111100000000 V
b11111111 o#
b11111111 h#
b1111111100000000 }#
b0 @"
b0 3"
b0 ?"
b0 }"
b0 B#
b0 0"
0)$
b0 &$
b0 '$
b0 %$
b11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ($
#40
b11111101 7
0"
04
#45
b11111101 -
b11111101 :
b11111101 I
b100 =
b100 v"
b11111111 ,
b11111111 B
b11111111 n"
b100 w"
0(
0'
1"
14
#50
0"
04
#55
b111 {
b111 [#
bz -
bz :
bz I
b11111101 `"
b11111101 l#
b11111101 _"
b11111101 k#
b11111101 h"
b10111001 r
b10111001 /#
b11111110 3#
b10000000 +#
0G#
b11111101 >"
b1000 =
b1000 v"
b111101 ~"
b11 [
b11 _#
b111 F#
b111 J#
b101 H#
b11 I#
b1111111111111101 d"
b10 S"
b1111111111111101 f"
b11111101 G
b11111101 H
1(
1'
b1000 w"
1)
0&
0t"
b11111101 E"
b11111101 C#
b1 R"
b1 W"
1"
14
#60
0"
04
#65
1i"
b1 d"
b1 f"
b10000 =
b10000 v"
1p"
b10000 w"
0(
1"
14
#70
0"
04
#75
0i"
b10 =
b10 v"
0p"
b0 z
b0 2#
b1101010 r
b1101010 /#
b0 3#
19#
1=#
b0 4#
1A#
1@#
1(
0)
b10 w"
1&
1t"
b111 1"
b111 z"
b1 /
b1 C
b1 /"
1"
14
#80
b100 7
0"
04
#85
b100 -
b100 :
b100 I
b11111110 z
b11111110 2#
b10111001 r
b10111001 /#
b11111110 3#
09#
0=#
b11111110 4#
0A#
0@#
b100 =
b100 v"
b0 1"
b0 z"
b100 w"
0(
0'
1"
14
#90
0"
04
#95
1Z
1S
1X
b1010 N
b1010 b#
b0 {
b0 [#
bz -
bz :
bz I
b100 `"
b100 l#
b100 _"
b100 k#
b100 h"
b10111001 r
b10111001 /#
b11111110 3#
b1 +#
1G#
b100 >"
b1000 =
b1000 v"
b100 ~"
b0 [
b0 _#
b0 F#
b0 J#
b100 H#
b0 I#
b100 d"
b11 S"
b100 f"
b100 G
b100 H
1(
1'
b1000 w"
1)
0&
0t"
b10 l"
b100 E"
b100 C#
b10 R"
b10 W"
1"
14
#100
0"
04
#105
b0 z
b0 2#
b1010001 r
b1010001 /#
b0 3#
07#
b0 ;#
b0 4#
b1 ?#
1i"
b1 d"
b1 f"
b10000 =
b10000 v"
b0 V
b0 o#
b1 ["
b1 f#
1p"
b1 \"
b1 ;"
b1 |"
1V"
b10000 w"
0(
1"
14
#110
0"
04
#115
0i"
b10 =
b10 v"
b0 `"
b0 l#
b0 _"
b0 k#
0p"
1a"
b0 h"
1(
0)
b10 w"
1&
1t"
b10000 X"
1g"
b10 /
b10 C
b10 /"
1"
14
#120
bx 7
0"
04
#125
1Z
1S
b1010 N
b1010 b#
1X
bx -
bx :
bx I
0G#
b100 `"
b100 l#
b100 _"
b100 k#
b1010001 r
b1010001 /#
b0 3#
b100 h"
b1 C"
b100 =
b100 v"
0a"
b0 W
b0 m#
b0 h#
b0 }#
b1 ,
b1 B
b1 n"
b1010000 ?"
b1010000 }"
b1010000 B#
b0 X"
0g"
b100 w"
0(
0'
1"
14
#130
0"
04
#135
b0xxx O
b0xxx a#
1t
0Z
0S
b0xxx {
b0xxx [#
b0xxx N
b0xxx b#
1X
bz -
bz :
bz I
b1 `"
b1 l#
b1 _"
b1 k#
b1 h"
xG#
b1 z
b1 2#
b0 r
b0 /#
b1 3#
0-#
06#
08#
0,#
b0 :#
0<#
00#
b1 4#
b0 >#
b10000000 +#
bx >"
b1000 =
b1000 v"
bx ~"
bx F#
bx J#
bx H#
bx I#
bx d"
b100 S"
bx f"
b0 9"
b0 {"
b0 ^"
bx G
bx H
1(
1'
b1000 w"
1)
0&
0t"
b0 l"
bx E"
bx C#
b11 R"
b11 W"
1"
14
0$$
b0 !$
b10 "$
b0 ~#
b101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010 #$
