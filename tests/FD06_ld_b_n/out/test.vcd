$date
	Mon Oct 13 08:57:19 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module test $end
$var parameter 240 ! TESTNAME $end
$scope module tb $end
$var wire 1 " cpu_clk $end
$var wire 1 # cpu_reset $end
$var wire 8 $ irq_data [7:0] $end
$var wire 1 % cpu_wr_n $end
$var wire 1 & cpu_rfsh_n $end
$var wire 1 ' cpu_rd_n $end
$var wire 1 ( cpu_mreq_n $end
$var wire 1 ) cpu_m1_n $end
$var wire 1 * cpu_iorq_n $end
$var wire 1 + cpu_halt_n $end
$var wire 8 , cpu_do [7:0] $end
$var wire 8 - cpu_di [7:0] $end
$var wire 1 . cpu_busak_n $end
$var wire 16 / cpu_a [15:0] $end
$var reg 1 0 FAIL $end
$var reg 385 1 TESTCASE [0:384] $end
$var reg 1 2 cpu_int_n $end
$var reg 1 3 cpu_nmi_n $end
$var reg 1 4 i_clk $end
$var reg 1 5 i_reset_btn $end
$var reg 8 6 io_o [7:0] $end
$var reg 8 7 mem_o [7:0] $end
$scope module cpu $end
$var wire 1 8 busrq_n $end
$var wire 1 9 cen $end
$var wire 1 " clk $end
$var wire 8 : di [7:0] $end
$var wire 1 2 int_n $end
$var wire 1 3 nmi_n $end
$var wire 1 # reset $end
$var wire 1 ; wait_n $end
$var wire 1 < write $end
$var wire 7 = tstate [6:0] $end
$var wire 1 & rfsh_n $end
$var wire 1 > no_read $end
$var wire 7 ? mcycle [6:0] $end
$var wire 1 ) m1_n $end
$var wire 1 @ iorq $end
$var wire 1 A intcycle_n $end
$var wire 1 + halt_n $end
$var wire 8 B dout [7:0] $end
$var wire 1 . busak_n $end
$var wire 16 C A [15:0] $end
$var parameter 32 D IOWait $end
$var parameter 32 E Mode $end
$var parameter 32 F T2Write $end
$var reg 8 G di_reg [7:0] $end
$var reg 1 * iorq_n $end
$var reg 1 ( mreq_n $end
$var reg 1 ' rd_n $end
$var reg 1 % wr_n $end
$scope module core $end
$var wire 1 8 busrq_n $end
$var wire 1 9 cen $end
$var wire 1 " clk $end
$var wire 8 H di [7:0] $end
$var wire 8 I dinst [7:0] $end
$var wire 1 2 int_n $end
$var wire 1 3 nmi_n $end
$var wire 1 # reset $end
$var wire 1 & rfsh_n $end
$var wire 1 ; wait_n $end
$var wire 1 < write $end
$var wire 3 J tstates [2:0] $end
$var wire 1 > no_read $end
$var wire 3 K mcycles_d [2:0] $end
$var wire 1 L iorq_i $end
$var wire 3 M Special_LD [2:0] $end
$var wire 4 N Set_BusB_To [3:0] $end
$var wire 4 O Set_BusA_To [3:0] $end
$var wire 3 P Set_Addr_To [2:0] $end
$var wire 1 Q SetEI $end
$var wire 1 R SetDI $end
$var wire 1 S Save_ALU $end
$var wire 1 T RstP $end
$var wire 16 U RegBusC [15:0] $end
$var wire 16 V RegBusB [15:0] $end
$var wire 16 W RegBusA [15:0] $end
$var wire 1 X Read_To_Reg $end
$var wire 1 Y Read_To_Acc $end
$var wire 1 Z PreserveC $end
$var wire 2 [ Prefix [1:0] $end
$var wire 1 \ LDZ $end
$var wire 1 ] LDW $end
$var wire 1 ^ LDSPHL $end
$var wire 1 _ JumpXY $end
$var wire 1 ` JumpE $end
$var wire 1 a Jump $end
$var wire 1 b Inc_WZ $end
$var wire 1 c Inc_PC $end
$var wire 4 d IncDec_16 [3:0] $end
$var wire 1 e I_SCF $end
$var wire 1 f I_RRD $end
$var wire 1 g I_RLD $end
$var wire 1 h I_RETN $end
$var wire 1 i I_INRC $end
$var wire 1 j I_DJNZ $end
$var wire 1 k I_CPL $end
$var wire 1 l I_CCF $end
$var wire 1 m I_BTR $end
$var wire 1 n I_BT $end
$var wire 1 o I_BC $end
$var wire 2 p IMode [1:0] $end
$var wire 1 q Halt $end
$var wire 8 r F_Out [7:0] $end
$var wire 1 s ExchangeRp $end
$var wire 1 t ExchangeRS $end
$var wire 1 u ExchangeDH $end
$var wire 1 v ExchangeAF $end
$var wire 1 w Call $end
$var wire 1 x Arith16 $end
$var wire 8 y ALU_Q [7:0] $end
$var wire 4 z ALU_Op [3:0] $end
$var parameter 32 { Flag_C $end
$var parameter 32 | Flag_H $end
$var parameter 32 } Flag_N $end
$var parameter 32 ~ Flag_P $end
$var parameter 32 !" Flag_S $end
$var parameter 32 "" Flag_X $end
$var parameter 32 #" Flag_Y $end
$var parameter 32 $" Flag_Z $end
$var parameter 32 %" IOWait $end
$var parameter 32 &" Mode $end
$var parameter 3 '" aBC $end
$var parameter 3 (" aDE $end
$var parameter 3 )" aIOA $end
$var parameter 3 *" aNone $end
$var parameter 3 +" aSP $end
$var parameter 3 ," aXY $end
$var parameter 3 -" aZI $end
$var reg 16 ." A [15:0] $end
$var reg 8 /" ACC [7:0] $end
$var reg 4 0" ALU_Op_r [3:0] $end
$var reg 1 1" Alternate $end
$var reg 8 2" Ap [7:0] $end
$var reg 1 3" Arith16_r $end
$var reg 1 4" Auto_Wait $end
$var reg 1 5" Auto_Wait_t1 $end
$var reg 1 6" Auto_Wait_t2 $end
$var reg 1 7" BTR_r $end
$var reg 8 8" BusA [7:0] $end
$var reg 1 9" BusAck $end
$var reg 8 :" BusB [7:0] $end
$var reg 1 ;" BusReq_s $end
$var reg 1 <" ClkEn $end
$var reg 8 =" DI_Reg [7:0] $end
$var reg 8 >" F [7:0] $end
$var reg 8 ?" Fp [7:0] $end
$var reg 1 @" Halt_FF $end
$var reg 8 A" I [7:0] $end
$var reg 16 B" ID16 [15:0] $end
$var reg 1 C" INT_s $end
$var reg 8 D" IR [7:0] $end
$var reg 2 E" ISet [1:0] $end
$var reg 2 F" IStatus [1:0] $end
$var reg 1 G" IncDecZ $end
$var reg 1 H" IntCycle $end
$var reg 1 I" IntE $end
$var reg 1 J" IntE_FF1 $end
$var reg 1 K" IntE_FF2 $end
$var reg 1 L" NMICycle $end
$var reg 1 M" NMI_s $end
$var reg 1 N" NextIs_XY_Fetch $end
$var reg 1 O" No_BTR $end
$var reg 1 P" Oldnmi_n $end
$var reg 16 Q" PC [15:0] $end
$var reg 16 R" PC16 [15:0] $end
$var reg 16 S" PC16_B [15:0] $end
$var reg 3 T" Pre_XY_F_M [2:0] $end
$var reg 1 U" PreserveC_r $end
$var reg 8 V" R [7:0] $end
$var reg 5 W" Read_To_Reg_r [4:0] $end
$var reg 3 X" RegAddrA [2:0] $end
$var reg 3 Y" RegAddrA_r [2:0] $end
$var reg 3 Z" RegAddrB [2:0] $end
$var reg 3 [" RegAddrB_r [2:0] $end
$var reg 3 \" RegAddrC [2:0] $end
$var reg 16 ]" RegBusA_r [15:0] $end
$var reg 8 ^" RegDIH [7:0] $end
$var reg 8 _" RegDIL [7:0] $end
$var reg 1 `" RegWEH $end
$var reg 1 a" RegWEL $end
$var reg 16 b" SP [15:0] $end
$var reg 16 c" SP16 [15:0] $end
$var reg 16 d" SP16_A [15:0] $end
$var reg 16 e" SP16_B [15:0] $end
$var reg 1 f" Save_ALU_r $end
$var reg 8 g" Save_Mux [7:0] $end
$var reg 1 h" T_Res $end
$var reg 16 i" TmpAddr [15:0] $end
$var reg 1 j" XY_Ind $end
$var reg 2 k" XY_State [1:0] $end
$var reg 1 l" Z16_r $end
$var reg 1 . busak_n $end
$var reg 8 m" dout [7:0] $end
$var reg 1 + halt_n $end
$var reg 1 A intcycle_n $end
$var reg 1 @ iorq $end
$var reg 1 n" last_mcycle $end
$var reg 1 o" last_tstate $end
$var reg 1 ) m1_n $end
$var reg 7 p" mc [6:0] $end
$var reg 7 q" mcycle [6:0] $end
$var reg 3 r" mcycles [2:0] $end
$var reg 1 s" rfsh_n_r $end
$var reg 1 t" stop $end
$var reg 7 u" ts [6:0] $end
$var reg 7 v" tstate [6:0] $end
$scope function mcyc_to_number $end
$var reg 7 w" mcyc [6:0] $end
$upscope $end
$scope function number_to_bitvec $end
$var reg 3 x" num [2:0] $end
$upscope $end
$scope module i_alu $end
$var wire 4 y" ALU_Op [3:0] $end
$var wire 1 3" Arith16 $end
$var wire 8 z" BusA [7:0] $end
$var wire 8 {" BusB [7:0] $end
$var wire 8 |" F_In [7:0] $end
$var wire 6 }" IR [5:0] $end
$var wire 2 ~" ISet [1:0] $end
$var wire 1 l" Z16 $end
$var parameter 32 !# Flag_C $end
$var parameter 32 "# Flag_H $end
$var parameter 32 ## Flag_N $end
$var parameter 32 $# Flag_P $end
$var parameter 32 %# Flag_S $end
$var parameter 32 &# Flag_X $end
$var parameter 32 '# Flag_Y $end
$var parameter 32 (# Flag_Z $end
$var parameter 32 )# Mode $end
$var reg 8 *# BitMask [7:0] $end
$var reg 1 +# Carry7_v $end
$var reg 1 ,# Carry_v $end
$var reg 9 -# DAA_Q [8:0] $end
$var reg 8 .# F_Out [7:0] $end
$var reg 1 /# HalfCarry_v $end
$var reg 1 0# OverFlow_v $end
$var reg 8 1# Q [7:0] $end
$var reg 8 2# Q_t [7:0] $end
$var reg 8 3# Q_v [7:0] $end
$var reg 1 4# UseCarry $end
$scope function AddSub1 $end
$var reg 1 5# A $end
$var reg 1 6# B $end
$var reg 1 7# Carry_In $end
$var reg 1 8# Sub $end
$upscope $end
$scope function AddSub3 $end
$var reg 3 9# A [2:0] $end
$var reg 3 :# B [2:0] $end
$var reg 1 ;# Carry_In $end
$var reg 1 <# Sub $end
$upscope $end
$scope function AddSub4 $end
$var reg 4 =# A [3:0] $end
$var reg 4 ># B [3:0] $end
$var reg 1 ?# Carry_In $end
$var reg 1 @# Sub $end
$upscope $end
$upscope $end
$scope module mcode $end
$var wire 8 A# F [7:0] $end
$var wire 1 H" INTCycle $end
$var wire 8 B# IR [7:0] $end
$var wire 2 C# ISet [1:0] $end
$var wire 7 D# MCycle [6:0] $end
$var wire 1 L" NMICycle $end
$var wire 3 E# w_cc [2:0] $end
$var wire 1 F# f_cc_true $end
$var wire 3 G# SSS [2:0] $end
$var wire 2 H# DPAIR [1:0] $end
$var wire 3 I# DDD [2:0] $end
$var parameter 32 J# Flag_C $end
$var parameter 32 K# Flag_H $end
$var parameter 32 L# Flag_N $end
$var parameter 32 M# Flag_P $end
$var parameter 32 N# Flag_S $end
$var parameter 32 O# Flag_X $end
$var parameter 32 P# Flag_Y $end
$var parameter 32 Q# Flag_Z $end
$var parameter 32 R# Mode $end
$var parameter 3 S# aBC $end
$var parameter 3 T# aDE $end
$var parameter 3 U# aIOA $end
$var parameter 3 V# aNone $end
$var parameter 3 W# aSP $end
$var parameter 3 X# aXY $end
$var parameter 3 Y# aZI $end
$var reg 4 Z# ALU_Op [3:0] $end
$var reg 1 x Arith16 $end
$var reg 1 w Call $end
$var reg 1 v ExchangeAF $end
$var reg 1 u ExchangeDH $end
$var reg 1 t ExchangeRS $end
$var reg 1 s ExchangeRp $end
$var reg 1 q Halt $end
$var reg 2 [# IMode [1:0] $end
$var reg 1 L IORQ $end
$var reg 1 o I_BC $end
$var reg 1 n I_BT $end
$var reg 1 m I_BTR $end
$var reg 1 l I_CCF $end
$var reg 1 k I_CPL $end
$var reg 1 j I_DJNZ $end
$var reg 1 i I_INRC $end
$var reg 1 h I_RETN $end
$var reg 1 g I_RLD $end
$var reg 1 f I_RRD $end
$var reg 1 e I_SCF $end
$var reg 4 \# IncDec_16 [3:0] $end
$var reg 1 c Inc_PC $end
$var reg 1 b Inc_WZ $end
$var reg 1 a Jump $end
$var reg 1 ` JumpE $end
$var reg 1 _ JumpXY $end
$var reg 1 ^ LDSPHL $end
$var reg 1 ] LDW $end
$var reg 1 \ LDZ $end
$var reg 3 ]# MCycles [2:0] $end
$var reg 1 > NoRead $end
$var reg 2 ^# Prefix [1:0] $end
$var reg 1 Z PreserveC $end
$var reg 1 Y Read_To_Acc $end
$var reg 1 X Read_To_Reg $end
$var reg 1 T RstP $end
$var reg 1 S Save_ALU $end
$var reg 1 R SetDI $end
$var reg 1 Q SetEI $end
$var reg 3 _# Set_Addr_To [2:0] $end
$var reg 4 `# Set_BusA_To [3:0] $end
$var reg 4 a# Set_BusB_To [3:0] $end
$var reg 3 b# Special_LD [2:0] $end
$var reg 3 c# TStates [2:0] $end
$var reg 1 < Write $end
$scope begin default_ed_block $end
$upscope $end
$scope begin handle_prefixes $end
$upscope $end
$upscope $end
$scope module regs $end
$var wire 3 d# AddrA [2:0] $end
$var wire 3 e# AddrB [2:0] $end
$var wire 3 f# AddrC [2:0] $end
$var wire 8 g# B [7:0] $end
$var wire 8 h# C [7:0] $end
$var wire 1 <" CEN $end
$var wire 8 i# D [7:0] $end
$var wire 8 j# DIH [7:0] $end
$var wire 8 k# DIL [7:0] $end
$var wire 8 l# DOAH [7:0] $end
$var wire 8 m# DOAL [7:0] $end
$var wire 8 n# DOBH [7:0] $end
$var wire 8 o# DOBL [7:0] $end
$var wire 8 p# DOCH [7:0] $end
$var wire 8 q# DOCL [7:0] $end
$var wire 8 r# E [7:0] $end
$var wire 8 s# H [7:0] $end
$var wire 8 t# L [7:0] $end
$var wire 1 `" WEH $end
$var wire 1 a" WEL $end
$var wire 1 " clk $end
$var wire 16 u# IY [15:0] $end
$var wire 16 v# IX [15:0] $end
$var wire 16 w# HLp [15:0] $end
$var wire 16 x# HL [15:0] $end
$var wire 16 y# DEp [15:0] $end
$var wire 16 z# DE [15:0] $end
$var wire 16 {# BCp [15:0] $end
$var wire 16 |# BC [15:0] $end
$upscope $end
$scope begin sync_inputs $end
$upscope $end
$upscope $end
$upscope $end
$scope task ASSERT $end
$var reg 8 }# I [7:0] $end
$var reg 2 ~# IFF [1:0] $end
$var reg 8 !$ R [7:0] $end
$var reg 192 "$ REGS [191:0] $end
$var reg 1 #$ alt $end
$upscope $end
$scope task SETUP $end
$var reg 8 $$ I [7:0] $end
$var reg 2 %$ IFF [1:0] $end
$var reg 8 &$ R [7:0] $end
$var reg 192 '$ REGS [191:0] $end
$var reg 1 ($ alt $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b110 Y#
b10 X#
b101 W#
b111 V#
b100 U#
b1 T#
b0 S#
b0 R#
b110 Q#
b101 P#
b11 O#
b111 N#
b10 M#
b1 L#
b100 K#
b0 J#
b0 )#
b110 (#
b101 '#
b11 &#
b111 %#
b10 $#
b1 ##
b100 "#
b0 !#
b110 -"
b10 ,"
b101 +"
b111 *"
b100 )"
b1 ("
b0 '"
b0 &"
b1 %"
b110 $"
b101 #"
b11 ""
b111 !"
b10 ~
b1 }
b100 |
b0 {
b1 F
b0 E
b1 D
b1011010010110100100000010001100100010000100000001100000011011000100000010000110100010000100000001010000110110001100100001000000110001000101100001001000100001101000100001010010010000000101000011101010110111001100100011011110110001100101001 !
$end
#0
$dumpvars
x($
bx '$
bx &$
bx %$
bx $$
x#$
bx "$
bx !$
bx ~#
bx }#
bx |#
bx {#
bx z#
bx y#
bx x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
bx p#
bx o#
bx n#
bx m#
bx l#
bx k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
bx _#
bx ^#
bx ]#
bx \#
bx [#
bx Z#
bx I#
bx H#
bx G#
xF#
bx E#
bx D#
bx C#
bx B#
bx A#
x@#
x?#
bx >#
bx =#
x<#
x;#
bx :#
bx 9#
x8#
x7#
x6#
x5#
x4#
bx 3#
bx 2#
bx 1#
x0#
x/#
bx .#
bx -#
x,#
x+#
bx *#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
xt"
1s"
bx r"
bx q"
bx p"
xo"
xn"
bx m"
xl"
bx k"
xj"
bx i"
0h"
bx g"
xf"
bx e"
bx d"
bx c"
bx b"
0a"
0`"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
xU"
bx T"
bx S"
bx R"
bx Q"
xP"
xO"
0N"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
bx F"
bx E"
bx D"
xC"
bx B"
bx A"
x@"
bx ?"
bx >"
bx ="
x<"
x;"
bx :"
x9"
bx 8"
x7"
x6"
x5"
x4"
x3"
bx 2"
x1"
bx 0"
bx /"
bx ."
bx z
bx y
xx
xw
xv
xu
xt
xs
bx r
xq
bx p
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
bx d
xc
xb
xa
x`
x_
x^
x]
x\
bx [
xZ
xY
xX
bx W
bx V
bx U
xT
xS
xR
xQ
bx P
bx O
bx N
bx M
xL
bx K
bx J
bz I
bx H
bx G
bx C
bx B
xA
x@
bx ?
x>
bx =
x<
1;
bz :
19
18
bx 7
bx 6
15
04
13
12
bx 1
00
bx /
x.
bz -
bx ,
x+
1*
x)
1(
1'
1&
1%
b11100111 $
1#
0"
$end
#5
0t"
0@
0o"
0<
0>
0q
b11 p
b11 [#
0Q
0R
0i
0f
0g
0m
0o
0n
0h
0e
0l
0k
0j
0t
0v
0s
0u
b0 M
b0 b#
0^
0]
0\
0T
0w
0_
0`
0a
b111 P
b111 _#
0L
0x
0Z
0S
b0 z
b0 Z#
b0 O
b0 `#
b0 N
b0 a#
0X
0Y
b0 d
b0 \#
0b
0c
b100 J
b100 c#
b1 K
b1 ]#
0F#
b0 _"
b0 k#
b0 ^"
b0 j#
08#
0<#
0@#
0?#
04#
b1 *#
bx0xxxx0x r
bx0xxxx0x .#
b0 }"
b0 [
b0 ^#
b0 E#
b0 I#
b0 G#
b0 H#
b0 c"
b1 R"
b1 e"
b1111111111111111 d"
b1 S"
b0 g"
1<"
04"
0I"
1A
1.
1+
b0 ="
b1 =
b1 u"
b1 ?
b1 p"
0P"
0M"
0C"
0;"
0j"
0U"
0f"
b0 0"
b0 y"
0l"
07"
03"
b0 W"
01"
b1111111111111111 b"
b0 V"
b0 A"
b11111111 ?"
b11111111 2"
b11111111 >"
b11111111 |"
b11111111 A#
b11111111 /"
b0 ,
b0 B
b0 m"
b0 r"
b0 F"
b0 k"
b0 E"
b0 ~"
b0 C#
b0 D"
b0 B#
b0 i"
b0 /
b0 C
b0 ."
b0 Q"
1)
06"
05"
0O"
0K"
0J"
0H"
0L"
09"
0@"
b0 T"
b1 v"
b1 q"
b1 D#
b0 G
b0 H
1"
14
#10
0"
04
#15
b0 Z"
b0 e#
b0 X"
b0 d#
b11 \"
b11 f#
b0 ["
b0 Y"
1"
14
#20
0"
04
#25
1"
14
#30
0"
04
0#
05
#35
b0 y
b0 1#
b0 2#
00#
0,#
05#
06#
07#
0+#
b0 9#
b0 :#
0;#
0/#
b0 3#
b0 =#
b0 >#
b10 =
b10 u"
1n"
b0 8"
b0 z"
b0 :"
b0 {"
b0 ]"
1P"
0)
b10 v"
b1 r"
1F#
b1 c"
b1 B"
b0 d"
b1000000 r
b1000000 .#
1"
14
b0 b"
b0 u#
b0 q#
b0 U
b0 p#
b0 v#
b0 w#
b0 y#
b0 {#
b0 t#
b0 s#
b0 x#
b0 r#
b0 i#
b0 z#
b0 m#
b0 o#
b0 h#
b0 W
b0 l#
b0 V
b0 n#
b0 g#
b0 |#
b0 ?"
b0 2"
b0 >"
b0 |"
b0 A#
b0 /"
0($
b0 %$
b0 &$
b0 $$
b0 '$
#40
b11011101 7
0"
04
#45
b11011101 -
b11011101 :
b11011101 I
b100 =
b100 u"
b100 v"
0(
0'
1"
14
#50
0"
04
#55
b11 z
b11 Z#
bz -
bz :
bz I
b11011101 _"
b11011101 k#
b11011101 ^"
b11011101 j#
b11011101 g"
b1000000 r
b1000000 .#
b0 2#
b1000 *#
0F#
b11011101 ="
b1000 =
b1000 u"
b11101 }"
b11 [
b11 ^#
b11 E#
b11 I#
b101 G#
b1 H#
b1111111111011101 c"
b10 R"
b1111111111011101 e"
b11011101 G
b11011101 H
1(
1'
b1000 v"
1)
0&
0s"
b11011101 D"
b11011101 B#
b1 Q"
b1 V"
1"
14
#60
0"
04
#65
1h"
b1 c"
b1 e"
b10000 =
b10000 u"
1o"
b10000 v"
0(
1"
14
#70
0"
04
#75
0h"
b10 =
b10 u"
0o"
b1000010 r
b1000010 .#
b0 2#
1,#
18#
17#
1+#
1<#
1;#
1/#
1@#
1?#
14#
1(
0)
b10 v"
1&
1s"
b11 0"
b11 y"
b1 /
b1 C
b1 ."
1"
14
#80
b110 7
0"
04
#85
b110 -
b110 :
b110 I
b1000000 r
b1000000 .#
b0 2#
0,#
08#
07#
0+#
0<#
0;#
0/#
0@#
0?#
04#
b100 =
b100 u"
b0 0"
b0 y"
b100 v"
0(
0'
1"
14
#90
0"
04
#95
b10 K
b10 ]#
b0 z
b0 Z#
bz -
bz :
bz I
b110 _"
b110 k#
b110 ^"
b110 j#
b110 g"
b1000000 r
b1000000 .#
b0 2#
b1 *#
1F#
b110 ="
b1000 =
b1000 u"
b110 }"
b0 [
b0 ^#
b0 E#
b0 I#
b110 G#
b0 H#
b110 c"
b11 R"
b110 e"
b110 G
b110 H
1(
1'
b1000 v"
1)
0&
0s"
b1 k"
b110 D"
b110 B#
b10 Q"
b10 V"
1"
14
#100
0"
04
#105
1h"
0n"
b1 c"
b1 e"
b10000 =
b10000 u"
1o"
b10 r"
b10000 v"
0(
1"
14
#110
0"
04
#115
1X
1c
b11 J
b11 c#
b10 K
b10 ]#
1n"
0h"
b10 =
b10 u"
b10 ?
b10 p"
0o"
1(
b10 q"
b10 D#
b10 v"
1&
1s"
b10 /
b10 C
b10 ."
1"
14
#120
b11001101 7
0"
04
#125
b11001101 -
b11001101 :
b11001101 I
b100 =
b100 u"
b100 v"
0(
0'
1"
14
#130
0"
04
#135
bz -
bz :
bz I
b11001101 _"
b11001101 k#
b11001101 ^"
b11001101 j#
b11001101 g"
1h"
b11001101 ="
b1000 =
b1000 u"
1o"
b1111111111001101 c"
b100 R"
b1111111111001101 e"
b11001101 G
b11001101 H
1(
1'
b1000 v"
b11 Q"
1"
14
#140
0"
04
#145
0X
0c
b100 J
b100 c#
b10 K
b10 ]#
0n"
0h"
b1 c"
b1 e"
b10 =
b10 u"
b1 ?
b1 p"
1`"
0o"
b10000 W"
b11 /
b11 C
b11 ."
b1 q"
b1 D#
0)
b10 v"
1"
14
#150
b0 7
0"
04
#155
b0 -
b0 :
b0 I
b1100110100000001 B"
b100 =
b100 u"
0`"
b1100110100000000 W
b11001101 l#
b1100110100000000 V
b11001101 n#
b11001101 g#
b1100110100000000 |#
0(
0'
b100 v"
b0 W"
1"
14
#160
0"
04
#165
b1 K
b1 ]#
bz -
bz :
bz I
b0 _"
b0 k#
b0 ^"
b0 j#
b10011010 y
b10011010 1#
b10011001 r
b10011001 .#
b10011010 2#
1,#
15#
16#
17#
1+#
b100 9#
b100 :#
1;#
1/#
b10011010 3#
b1101 =#
b1101 >#
b0 }"
b0 G#
b0 g"
b0 c"
b101 R"
b0 e"
b0 ="
b1000 =
b1000 u"
b1100110100000000 ]"
b11001101 8"
b11001101 z"
b11001101 :"
b11001101 {"
b0 k"
b0 D"
b0 B#
b100 Q"
b11 V"
b10 /
b10 C
b10 ."
0&
0s"
b1000 v"
1)
b0 G
b0 H
1(
1'
1"
14
0#$
b0 ~#
b10 !$
b0 }#
b11001101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011 "$
